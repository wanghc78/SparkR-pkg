#exportPattern("^[[:alpha:]]+")
exportClasses("RDD")
exportClasses("Broadcast")
exportMethods(
              "cache",
              "checkpoint",
              "cogroup",
              "collect",
              "collectAsMap",
              "collectPartition",
              "combineByKey",
              "count",
              "countByKey",
              "countByValue",
              "distinct",
              "Filter",
              "filterRDD",
              "flatMap",
              "flatMapValues",
              "foreach",
              "foreachPartition",
              "fullOuterJoin",
              "groupByKey",
              "join",
              "keyBy",
              "keys",
              "length",
              "lapply",
              "lapplyPartition",
              "lapplyPartitionsWithIndex",
              "leftOuterJoin",
              "lookup",
              "map",
              "mapPartitions",
              "mapPartitionsWithIndex",
              "mapValues",
              "maximum",
              "minimum",
              "numPartitions",
              "partitionBy",
              "persist",
              "reduce",
              "reduceByKey",
              "rightOuterJoin",
              "sampleRDD",
              "saveAsTextFile",
              "saveAsObjectFile",
              "take",
              "takeSample",
              "unionRDD",
              "unpersist",
              "value",
              "values"
             )

# S3 methods exported
export(
       "textFile",
       "objectFile",
       "parallelize",
       "hashCode",
       "includePackage",
       "broadcast",
       "setBroadcastValue",
       "setCheckpointDir"
      )
export("sparkR.init")
export("print.jobj")
useDynLib(SparkR, stringHashCode)
importFrom(methods, setGeneric, setMethod, setOldClass)
